1단계 코드 작성 관련 설명입니다. 작업 시작 전 꼭 읽어주시고 시작해주세요.

현재 코드는 food 패키지에 Food, Store / mgr 패키지에 Factory, Manageable, Manager로 구성되어 있습니다. 

Food 클래스는 정상적인 실행이 가능한지 테스트하기 위해 약식으로 작성한 클래스이고, 정상 작동 되는지 확인 하신 후 삭제하고 작업 시작해주시기 바랍니다.

대부분의 코드가 강의 예제와 비슷하지만 다른 점이 몇군데 존재합니다.


우선 Food 클래스 입니다.

read 메서드에 매개변수 int FoodCategory를 추가했습니다. 이 변수는 한식, 양식, 중식 등 음식의 종류를 나타내는 변수이고 상속 여부를 구분하기 위해 존재합니다. 

편의를 위해 Food 클래스는 0번, 한식 클래스는 1번, 양식 클래스는 2번으로 구분하였습니다.

이 변수를 통해 음식 종류를 구분할 수 있으며, matches 함수에선 검색 키워드가 "한식"인경우와 FoodCategory가 한식을 의미하는 1인 경우에 true를 반환하도록 해줘야 합니다. 

만약 양식을 검색하고 싶은 경우, 검색 키워드가 "양식"이고, FoodCategory는 2가 되어야 true를 반환합니다.


다음은 Factory 관련 클래스 변경사항입니다.

Factory 인터페이스를 보면 int inherit 매개변수가 포함되어 있고, 
Store 클래스의 create 메서드를 보면 inherit 변수를 통해 상속 클래스를 구분합니다.

각자 구현하시는 클래스에 맞게 Food는 0번, 한식은 1번, 양식은 2번을 이용해주시면 됩니다.

이로인해 Food 클래스의 read  메서드에 변경점이 생깁니다.

read 메서드는 int FoodCategory 매겨변수를 가지는데, 이 변수는 Manager 클래스의 readAll 함수에서 찾을 수 있습니다. 방금 전 상속 구분을 위해 생성하였던 inherit 변수입니다. 


이 변수의 전체적은 흐름은 다음과 같습니다.

"1 닭볶음탕" 이 입력값인 경우, 맨 처음 1은 클래스 생성 시에 Manager 클래스에서 inherit 변수로 입력되어 되어 Factory 인터페이스를 통해 Store 클래스로 넘어가 상속 구분의 역할을 합니다.

이후 Manager 클래스에서 Food 클래스 (혹은 한식, 양식 클래스)로 넘어가는 과정에서 FoodCategory라는 이름으로 변경되어 처음 설명 드렸던 matches 메서드에서 음식의 종류를 구별하기 위해 사용됩니다. 


작업 시작 전 위의 내용을 통해 코드의 구조를 이해하셔야 코드 작성이 수월합니다.


